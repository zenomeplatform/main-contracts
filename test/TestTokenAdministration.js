// Generated by CoffeeScript 2.2.2
(function() {
  var BigNumber, CrowdSale, ZNA, log, logStructTokenPool, web3;

  ZNA = artifacts.require("ZNA");

  CrowdSale = artifacts.require("ZenomeCrowdsale");

  web3 = global.web3;

  BigNumber = web3.BigNumber;

  log = function(...args) {
    return console.log("      ", ...args);
  };

  logStructTokenPool = async function(pool, name) {
    var temp;
    if (pool[0]) {
      temp = pool;
    } else {
      temp = (await pool());
    }
    log("");
    log("TokenPool", name);
    log('minter : ', temp[0]);
    log('amount : ', temp[1]);
    log('safecap: ', temp[2]);
    log('total  : ', temp[3]);
    return log();
  };

  // Monkey-patching assert module to support BigNumber equal
  assert.BN = function(a, b) {
    // console.log(web3.toHex('10000000000000000000000000000000000000000'), web3.toHex('10000000000000000000000000000000000000001'))
    return assert.equal(web3.toHex(a), web3.toHex(b));
  };

  contract("TestTokenAdministration", function(accounts) {
    var crowdsale, customer1, customer2, longtermer, new_owner, onwer, rewarder, seller, temp_for_longterm, temp_for_rewards, temp_for_sale, totalLongtm, totalReward, totalSeller, zero, zeroAddress, zna;
    crowdsale = null;
    zna = null;
    [onwer, seller, rewarder, longtermer, customer1, customer2, new_owner] = accounts;
    zero = web3.toWei(0, 'ether');
    zeroAddress = '0x0000000000000000000000000000000000000000';
    totalSeller = web3.toBigNumber(web3.toWei(15750000, 'ether'));
    totalReward = new BigNumber(web3.toWei(10500000, 'ether'));
    totalLongtm = new BigNumber(web3.toWei(8750000, 'ether'));
    temp_for_sale = null;
    temp_for_rewards = null;
    temp_for_longterm = null;
    describe("[at the start]", function() {
      return it("is a new crowdsale instance", async function() {
        var token;
        crowdsale = (await CrowdSale.new());
        token = (await crowdsale.token());
        return zna = ZNA.at(token);
      });
    });
    describe("[checking token pausing process]", function() {
      it("minting tokens for customer1", async function() {
        var amount;
        amount = web3.toWei(100000, 'ether');
        await crowdsale.setSaleMinter(seller, amount, {
          from: onwer
        });
        return (await crowdsale.mintSoldTokens(customer1, amount, {
          from: seller
        }));
      });
      it("ALLOWED to transfer tokens from customer1 to customer2", async function() {
        var transfer_amount;
        transfer_amount = web3.toWei(1000, 'ether');
        return (await zna.transfer(customer2, transfer_amount, {
          from: customer1
        }));
      });
      it("pausing token", async function() {
        return (await crowdsale.pauseToken({
          from: onwer
        }));
      });
      it("NOT ALLOWED to transfer tokens from customer1 to customer2", async function() {
        var error, transfer_amount;
        transfer_amount = web3.toWei(1000, 'ether');
        try {
          await zna.transfer(customer2, transfer_amount, {
            from: customer1
          });
          return assert.fail();
        } catch (error1) {
          error = error1;
          return assert.ok(error);
        }
      });
      it("unpausing token", async function() {
        return (await crowdsale.unpauseToken({
          from: onwer
        }));
      });
      return it("ALLOWED to transfer tokens from customer1 to customer2", async function() {
        var transfer_amount;
        transfer_amount = web3.toWei(1000, 'ether');
        return (await zna.transfer(customer2, transfer_amount, {
          from: customer1
        }));
      });
    });
    return describe("[checking ownership transfer]", function() {
      it("NOT ALLOWED transfer ownership to zero address", async function() {
        var error;
        try {
          await crowdsale.transferTokenOwnership(zeroAddress, {
            from: onwer
          });
          return assert.fail();
        } catch (error1) {
          error = error1;
          return assert.ok(error);
        }
      });
      it("ALLOWED to change ZNA contract owner", async function() {
        return (await crowdsale.transferTokenOwnership(new_owner, {
          from: onwer
        }));
      });
      return it("contract owner is changed", async function() {
        var zna_owner;
        zna_owner = (await zna.owner());
        return assert.equal(new_owner, zna_owner);
      });
    });
  });

}).call(this);
